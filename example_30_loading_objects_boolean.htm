<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
	<meta http-equiv="no-cache">
	<meta http-equiv="Expires" content="-1">
	<meta http-equiv="Cache-Control" content="no-cache">

	<head>
		<title>3D course</title>

		<!-- PLEASE READ THE README FILE wich contains explanations on all the functions
			 in the Canvas3D library -->

		<!-- these are the libraries needed to run this example,
			we need some jquery stuff, but also some libs that are used to support
			the canvas3D library such as csg.js, three.js for 3D rendering, 
			and objLoader and -exporter in order to load/save .obj files 
			
			you can find documentation on these libraries here:
			http://jquery.org
			http://threejs.org
			http://learningthreejs.com/blog/2011/12/10/constructive-solid-geometry-with-csg-js/
			http://threejs.org/examples/webgl_loader_obj.html
		-->
		<script src="lib/jquery-1.8.3.js" type="text/javascript"></script>
	    <script src="lib/jquery.timer.js" type="text/javascript" ></script>
		<script src="lib/csg.js"></script>
		<script src="lib/three.js"></script>
		<script src="lib/ThreeCSG.js"></script>
		<script src="lib/OrbitControls.js"></script>
		<script src="lib/objloader.js"></script>
		<script src="lib/objexporter.js"></script>
		<!-- the 'RT' library is my own set of utility finctions, only used
			to support some math and graphics stuff. there is no documentation
			on this, but thats not necessary anyway, because you don't interact with it directly ;)
		-->
		<script src="lib/RT/RT.js" type="text/javascript" ></script>
		<script src="lib/RT/Error.js" type="text/javascript" ></script>
		<script src="lib/RT/Utils.js" type="text/javascript" ></script>
		<script src="lib/RT/Vec2.js" type="text/javascript" ></script>
		<script src="lib/RT/MouseInterface.js" type="text/javascript" ></script>
		<script src="lib/RT/Event.js" type="text/javascript" ></script>
		<script src="lib/RT/EventDispatcherInterface.js" type="text/javascript" ></script>
		<script src="lib/RT/KeyboardInterface.js" type="text/javascript" ></script>
		<script src="lib/RT/LayerInterface.js" type="text/javascript" ></script>
		<script src="lib/RT/Layer.js" type="text/javascript" ></script>

		<!-- and finally the actual Canvas3D library -->
		<script src="lib/Canvas3D.js" type="text/javascript" ></script>
	</head>
	
	<body onload="init();">

		<script type="text/javascript">

			// THIS EXAMPLE NEEDS TO BE RUN ON A LOCAL WEBSERVER,
			// SEE THE README FOR MORE INFORMATION

			// create a new 3d canvas
			var canvas3D = new KABK.Canvas3D();

			var objectA = undefined;
			var objectB = undefined;

			init = function() {

				// initialize it when the page has loaded and the 'init' function is called
				canvas3D.initialize();

				// stop making me dizzy
				canvas3D.setAutoRotate( false );

				// position the camera
				canvas3D.setCameraPosition( 100, 100, 100 );
				canvas3D.setCameraCenter( 0, 0, 0 );

				// set the background color
				canvas3D.setBackgroundColor( 0.05, 0.00, 0.4 );

				// give the object a color
				canvas3D.colorRGB( 0.7, 0.9, 1.0 );

				// the teapot is really tiny, so we scale it up to 50
				canvas3D.scale( 50, 50, 50 );

				canvas3D.material( "flat" );

				// it takes a little while for an object to load, and in the meantime
				// the browser goes on doing other stuff, so in order to do anything with the
				// shape, we need to set a function that is called once it has actually loaded,
				// otherwise we'll just be doing stuff with an empty 'shell':
				// in order to load an obj file from disk, see the README.txt file for an explanation
				canvas3D.loadObject( "torus.obj", onObjectALoaded );
				canvas3D.loadObject( "octahedron.obj", onObjectBLoaded );

				requestAnimationFrame( onRequestAnimationFrame );
			}

			doBoolean = function(){
				if( objectA !== undefined && objectB !== undefined ){
					canvas3D.booleanOperation( objectA, objectB, 'subtract' );				
				}
			}

			// this function is called as soon as the shape is loaded
			onObjectALoaded = function( object ){
				canvas3D.save();
				canvas3D.scale( 2, 2, 2 );
				objectA = canvas3D.copy( object );
				canvas3D.remove( object );
				canvas3D.restore();
				doBoolean();
			}

			// this function is called as soon as the shape is loaded
			onObjectBLoaded = function( object ){
				canvas3D.save();
				canvas3D.scale( 1, 1, 1 );
				objectB = canvas3D.copy( object );
				canvas3D.remove( object );
				canvas3D.restore();
				doBoolean();
			}

			onRequestAnimationFrame = function() {
				canvas3D.update();
				canvas3D.draw();
				requestAnimationFrame( onRequestAnimationFrame );
			}
			    
		</script>
	</body>

</html>
