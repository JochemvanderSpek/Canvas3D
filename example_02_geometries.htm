<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
	<meta http-equiv="no-cache">
	<meta http-equiv="Expires" content="-1">
	<meta http-equiv="Cache-Control" content="no-cache">

	<head>
		<title>3D course</title>

		<!-- PLEASE READ THE README FILE wich contains explanations on all the functions
			 in the Canvas3D library -->

		<!-- these are the libraries needed to run this example,
			we need some jquery stuff, but also some libs that are used to support
			the canvas3D library such as csg.js, three.js for 3D rendering, 
			and objLoader and -exporter in order to load/save .obj files 
			
			you can find documentation on these libraries here:
			http://jquery.org
			http://threejs.org
			http://learningthreejs.com/blog/2011/12/10/constructive-solid-geometry-with-csg-js/
			http://threejs.org/examples/webgl_loader_obj.html
		-->
		<script src="lib/jquery-1.8.3.js" type="text/javascript"></script>
	    <script src="lib/jquery.timer.js" type="text/javascript" ></script>
		<script src="lib/csg.js"></script>
		<script src="lib/three.js"></script>
		<script src="lib/ThreeCSG.js"></script>
		<script src="lib/OrbitControls.js"></script>
		<script src="lib/objloader.js"></script>
		<script src="lib/objexporter.js"></script>

		<!-- for this example we also need the font libraries from three js-->
		<script src="./rsrc/fonts/gentilis_bold.typeface.js"></script>
		<script src="./rsrc/fonts/gentilis_regular.typeface.js"></script>
		<script src="./rsrc/fonts/optimer_bold.typeface.js"></script>
		<script src="./rsrc/fonts/optimer_regular.typeface.js"></script>
		<script src="./rsrc/fonts/helvetiker_bold.typeface.js"></script>
		<script src="./rsrc/fonts/helvetiker_regular.typeface.js"></script>
		<script src="./rsrc/fonts/droid/droid_sans_regular.typeface.js"></script>
		<script src="./rsrc/fonts/droid/droid_sans_bold.typeface.js"></script>
		<script src="./rsrc/fonts/droid/droid_serif_regular.typeface.js"></script>
		<script src="./rsrc/fonts/droid/droid_serif_bold.typeface.js"></script>

		<!-- the 'RT' library is my own set of utility finctions, only used
			to support some math and graphics stuff. there is no documentation
			on this, but thats not necessary anyway, because you don't interact with it directly ;)
		-->
		<script src="lib/RT/RT.js" type="text/javascript" ></script>
		<script src="lib/RT/Error.js" type="text/javascript" ></script>
		<script src="lib/RT/Utils.js" type="text/javascript" ></script>
		<script src="lib/RT/Vec2.js" type="text/javascript" ></script>
		<script src="lib/RT/MouseInterface.js" type="text/javascript" ></script>
		<script src="lib/RT/Event.js" type="text/javascript" ></script>
		<script src="lib/RT/EventDispatcherInterface.js" type="text/javascript" ></script>
		<script src="lib/RT/KeyboardInterface.js" type="text/javascript" ></script>
		<script src="lib/RT/LayerInterface.js" type="text/javascript" ></script>
		<script src="lib/RT/Layer.js" type="text/javascript" ></script>

		<!-- and finally the actual Canvas3D library -->
		<script src="lib/Canvas3D.js" type="text/javascript" ></script>
	</head>
	
	<body onload="init();">

		<script type="text/javascript">

			// create a new 3d canvas
			var canvas3D = new KABK.Canvas3D();

			init = function() {
				// initialize it when the page has loaded and the 'init' function is called
				canvas3D.initialize();

				// stop making me dizzy
				canvas3D.setAutoRotate( false );

				// set the camera center
				canvas3D.setCameraPosition( 200, 150, 200 );

				// and the position its looking at
				canvas3D.setCameraCenter( 100, 30, 100 );

				// store the start position
				canvas3D.save();

				// set the background color
				canvas3D.setBackgroundColor( 0.05, 0.00, 0.4 );

				var numShapes = 0;
				var maxShapes = 20;

				// give the next shape a color 
				canvas3D.colorHSL( ++numShapes / maxShapes, 1.0, 0.7 );

				// draw a box
				canvas3D.box( 10, 20, 30 );

				// give the next shape a color 
				canvas3D.colorHSL( ++numShapes / maxShapes, 1.0, 0.7 );

				// move along the x-axis
				canvas3D.translate( 20, 0, 0 );
				canvas3D.cylinder( 10, 10, 10, 12, 12, false );

				// give the next shape a color 
				canvas3D.colorHSL( ++numShapes / maxShapes, 1.0, 0.7 );

				canvas3D.translate( 20, 0, 0 );
				canvas3D.cylinder( 5, 10, 10, 12, 12, false );

				// give the next shape a color 
				canvas3D.colorHSL( ++numShapes / maxShapes, 1.0, 0.7 );

				canvas3D.translate( 20, 0, 0 );
				canvas3D.cylinder( 10, 5, 10, 12, 12, false );

				// give the next shape a color 
				canvas3D.colorHSL( ++numShapes / maxShapes, 1.0, 0.7 );

				canvas3D.translate( 20, 0, 0 );
				canvas3D.dodecahedron( 10, 0 );

				// give the next shape a color 
				canvas3D.colorHSL( ++numShapes / maxShapes, 1.0, 0.7 );

				canvas3D.translate( 20, 0, 0 );
				canvas3D.icosahedron( 10, 0 );

				// give the next shape a color 
				canvas3D.colorHSL( ++numShapes / maxShapes, 1.0, 0.7 );

				canvas3D.translate( 20, 0, 0 );
				canvas3D.octahedron( 10, 0 );

				// jump back to the start position
				canvas3D.restore();


				// give the next shape a color 
				canvas3D.colorHSL( ++numShapes / maxShapes, 1.0, 0.7 );

				// move forward
				canvas3D.translate( 0, 0, 30 );
				canvas3D.sphere( 5, 12, 12 );

				canvas3D.save();

				// give the next shape a color 
				canvas3D.colorHSL( ++numShapes / maxShapes, 1.0, 0.7 );

				canvas3D.translate( 20, 0, 0 );
				canvas3D.terahedron( 10, 0);

				// give the next shape a color 
				canvas3D.colorHSL( ++numShapes / maxShapes, 1.0, 0.7 );

				canvas3D.translate( 20, 0, 0 );
				canvas3D.text( 'hello', { 
											'size':10,
											'height':5,
											'curveSegments':3,
											'font':'optimer', // helvetiker, optimer, gentilis, droid sans, droid serif
											'weight':'bold',
											'style':'normal',
											'bevelEnabled':true,
											'bevelThickness':5,
											'bevelSize':2
										} );

				// give the next shape a color 
				canvas3D.colorHSL( ++numShapes / maxShapes, 1.0, 0.7 );

				canvas3D.translate( 40, 0, 0 );
				canvas3D.torus( 5, 2, 36, 24 );

				// give the next shape a color 
				canvas3D.colorHSL( ++numShapes / maxShapes, 1.0, 0.7 );

				canvas3D.translate( 20, 0, 0 );
				canvas3D.knot( 5, 2, 36, 24, 3, 2, 1 );

				canvas3D.translate( 20, 0, 0 );
				// create a new canvas
				var canvas = $( '<canvas width=40 height=40></canvas>' );
				// and get a context to the canvas
				var context = canvas[ 0 ].getContext( '2d' );

				// draw a cirlce at the center, with linewidth 20
				context.lineWidth = 3;
				context.strokeStyle = 'rgb( 255, 255, 255 )';
				context.beginPath();
				context.arc( 20, 20, 15, 0, Math.PI * 2.0 )
				context.closePath();
				context.stroke();

				// give the next shape a color 
				canvas3D.colorHSL( ++numShapes / maxShapes, 1.0, 0.7 );

				// then create a heightfield, 20 wide, 10 high and 20 deep, with a base of 5 units
				// using the canvas as data (instead of an image, which is also possible)
				canvas3D.heightField( 20, 5, 20, canvas, 5 );

				canvas3D.restore();

				for( var i = 0; i < 5; i++ ){
					canvas3D.translate( 0, 0, 20 );
					canvas3D.save();

					var e1 = 0.1 + ( i / 5.0 ) * 3.0;
					for( var j = 0; j < 5; j++ ){
						var e2 = 0.1 + ( j / 5.0 ) * 3.0;

						// give the next shape a color 
						canvas3D.colorHSL( ++numShapes / maxShapes, 1.0, 0.7 );

						canvas3D.ellipsoid( 5, 5, 5, e1, e2, 1.0, undefined, 0.5 );
						canvas3D.translate( 20, 0, 0 );
					}
					canvas3D.restore();
				}

				// save it as a obj file
//				canvas3D.saveOBJ();

				requestAnimationFrame( onRequestAnimationFrame );
			}

			onRequestAnimationFrame = function() {
				canvas3D.update();
				canvas3D.draw();
				requestAnimationFrame( onRequestAnimationFrame );
			}
			    
		</script>
	</body>

</html>
